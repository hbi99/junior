<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title></title>
</head>
<body>

<script type="text/javascript">

function DB() {
	this.queue = new Queue(this);
}
DB.prototype = {
	wait: function(msec) {
		var self = this,
			fn = function() {
				setTimeout(function() {
					self.queue._paused = false;
					self.queue.flush();
				}, msec);
			};
		fn._paused = true;
		this.queue.add(fn);
		return this;
	},
	check: function(check_fn) {
		var self = this,
			fn = function() {
				self.queue._paused = !check_fn();
				if (self.queue._paused) {
					self.queue.add(fn, true);

					self.queue.timeout = setTimeout(function() {
						if (!self.queue.timeout) {
							return;
						}
						self.queue._paused = false;
						self.queue.flush();
					}, 2100);
				} else {
					clearTimeout(self.queue.timeout);
					self.queue.timeout = false;
					self.queue._paused = false;
					self.queue._methods.shift();
					self.queue.flush();
				}
			};
		fn._paused = true;
		this.queue.add(fn);
		return this;
	},
	doit: function(fn) {
		var self = this;
		this.queue.add(function() {
			fn();
		});
		return this;
	}
};

// implementing function chaining
function Queue(owner) {
	this._methods = [];
	this._owner = owner;
	this._paused = false;
}
Queue.prototype = {
	add: function(fn, first) {
		if (first) this._methods.splice(0,0,fn);
		else this._methods.push(fn);
		if (!this._paused) this.flush();
	},
	flush: function() {
		if (this._paused) return;
		while (this._methods[0]) {
			var fn = this._methods.shift();
			fn.call(this._owner);
			if (fn._paused) {
				this._paused = true;
				break;
			}
		}
	}
};

var blue = 1,
	tmp = new DB();

tmp.doit(function() {
		console.log(1);
	})
	.check(function() {
		console.log('check');
		return blue === 2;
	})
	.wait(1000)
	.doit(function() {
		console.log(2);
	})
	.wait(500)
	.doit(function() {
		console.log(3);
	});

setTimeout(function() {
	console.log('blue = 2;');
	blue = 2;
}, 2500);

</script>

</body>
</html>